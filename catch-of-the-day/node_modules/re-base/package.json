{
  "_args": [
    [
      {
        "raw": "re-base@2.2.0",
        "scope": null,
        "escapedName": "re-base",
        "name": "re-base",
        "rawSpec": "2.2.0",
        "spec": "2.2.0",
        "type": "version"
      },
      "/Users/deadmaxis/Projects/code/React-For-Beginners-Starter-Files/catch-of-the-day"
    ]
  ],
  "_from": "re-base@2.2.0",
  "_id": "re-base@2.2.0",
  "_inCache": true,
  "_location": "/re-base",
  "_nodeVersion": "5.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/re-base-2.2.0.tgz_1473822547440_0.8831923564430326"
  },
  "_npmUser": {
    "name": "tylermcginnis",
    "email": "tylermcginnis33@gmail.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "re-base@2.2.0",
    "scope": null,
    "escapedName": "re-base",
    "name": "re-base",
    "rawSpec": "2.2.0",
    "spec": "2.2.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/re-base/-/re-base-2.2.0.tgz",
  "_shasum": "f74387577ddf9e3c475b1ada319013e63fe2e07b",
  "_shrinkwrap": null,
  "_spec": "re-base@2.2.0",
  "_where": "/Users/deadmaxis/Projects/code/React-For-Beginners-Starter-Files/catch-of-the-day",
  "author": {
    "name": "Tyler McGinnis and Jacob Turner"
  },
  "bugs": {
    "url": "https://github.com/tylermcginnis/re-base/issues"
  },
  "dependencies": {
    "es6-symbol": "^3.1.0",
    "firebase": "^3.3.0"
  },
  "description": "A Relay inspired library for building React.js + Firebase applications.",
  "devDependencies": {
    "babel": "^5.8.38",
    "babel-core": "^5.8.38",
    "babel-loader": "^5.4.2",
    "coveralls": "^2.11.12",
    "jasmine-core": "^2.4.1",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^0.1.12",
    "karma-coverage": "^0.3.1",
    "karma-failed-reporter": "0.0.3",
    "karma-firefox-launcher": "^0.1.7",
    "karma-jasmine": "^0.3.8",
    "karma-spec-reporter": "0.0.19",
    "karma-webpack": "^1.8.0",
    "node-libs-browser": "^0.5.3",
    "react": "^0.13.3",
    "webpack": "^1.13.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f74387577ddf9e3c475b1ada319013e63fe2e07b",
    "tarball": "https://registry.npmjs.org/re-base/-/re-base-2.2.0.tgz"
  },
  "gitHead": "c0637ad2d62d6e4f5a2c9b829217cc0ed2a65174",
  "homepage": "https://github.com/tylermcginnis/re-base#readme",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jisraelturner",
      "email": "j.israel.turner@gmail.com"
    },
    {
      "name": "tylermcginnis",
      "email": "tylermcginnis33@gmail.com"
    }
  ],
  "name": "re-base",
  "optionalDependencies": {},
  "readme": "# re-base\n[![Build Status](https://travis-ci.org/tylermcginnis/re-base.svg?branch=master)](https://travis-ci.org/tylermcginnis/re-base)\n[![Coverage Status](https://coveralls.io/repos/github/tylermcginnis/re-base/badge.svg?branch=master)](https://coveralls.io/github/tylermcginnis/re-base?branch=master)\n\n![welcome](https://media.giphy.com/media/6459ZFRF1Wxna/giphy.gif)\n\nQuestions? Find me on twitter at [@tylermcginnis33](http://twitter.com/tylermcginnis33)\n\n# What is re-base?\n\nReact.js makes managing state easy to reason about. Firebase makes persisting your data easy to implement. re-base, inspired by Relay, combines the benefits of React and Firebase by allowing each component to specify its own data dependency. Forget about your data persistence and focus on what really matters, your application's state.\n\n# Why re-base?\n\nI spent a few weeks trying to figure out the cleanest way to implement Firebase into my React/Flux application. After struggling for a bit, I [tweeted](https://twitter.com/tylermcginnis33/status/605838057825132549) my frustrations. I was enlightened to the fact that Firebase and Flux really don't work well together. It makes sense why they don't work together, because they're both trying to accomplish roughly the same thing. So I did away with my reliance upon Flux and tried to think of a clean way to implement React with Firebase. I came across ReactFire built by Jacob Wenger at Firebase and loved his idea. Sync a Firebase endpoint with a property on your component's state. So whenever your data changes, your state will be updated. Simple as that. The problem with ReactFire is because it uses Mixins, it's not compatible with ES6 classes. After chatting with Jacob Turner, we wanted to create a way to allow the one way binding of ReactFire with ES6 classes along some more features like two way data binding and listening to Firebase endpoints without actually binding a state property to them. Thus, re-base was built.\n\n# Features\n\n- [*syncState*](#syncstateendpoint-options): Two way data binding between any property on your component's state and any endpoint in Firebase. Use the same API you're used to to update your component's state (setState), and Firebase will also update.\n- [*bindToState*](#bindtostateendpoint-options): One way data binding. Whenever your Firebase endpoint changes, the property on your state will update as well.\n- [*listenTo*](#listentoendpoint-options): Whenever your Firebase endpoint changes, it will invoke a callback passing it the new data from Firebase.\n- [*fetch*](#fetchendpoint-options): Retrieve data from Firebase without setting up any binding or listeners.\n- [*post*](#postendpoint-options): Add new data to Firebase.\n- [*push*](#pushendpoint-options): Push new child data to Firebase.\n- [*update*](#updateendpoint-options): Update child data using only the referenced properties\n- [*removeBinding*](#removebindingref): Remove all of the Firebase listeners when your component unmounts.\n- [*reset*](#reset): Removes all of the Firebase listeners and resets the singleton (for testing purposes).\n\n# Installing\n\n```bash\n$ npm install re-base\n```\n\n# API\n\n#### For more in depth examples of the API, see the [`examples`](examples) folder.\n\n## createClass(firebaseConfig)\n\n##### Purpose\nAccepts a firebase configuration object as its only parameter and returns a singleton with the re-base API.\n\n##### Arguments\n  1. configuration\n    - type: object\n    - properties: \n      - apiKey (string - required) your firebase API key\n      - authDomain (string - required) your firebase auth domain\n      - databaseURL (string - required) your firebase database root URL\n      - storageBucket (string - optional) your firebase storage bucket\n\n##### Return Value\n  An object with the re-base API.\n\n##### Example\n\n```javascript\nvar Rebase = require('re-base');\nvar base = Rebase.createClass({\n  \t  apiKey: \"apiKey\",\n      authDomain: \"projectId.firebaseapp.com\",\n      databaseURL: \"https://databaseName.firebaseio.com\",\n      storageBucket: \"bucket.appspot.com\",\n});\n```\n\n<br />\n\n## syncState(endpoint, options)\n\n##### Purpose\n  Allows you to set up two way data binding between your component's state and your Firebase. Whenever your Firebase changes, your component's state will change. Whenever your component's state changes, Firebase will change.\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint to which you'd like to bind your component's state\n  2. options\n    - type: object\n    - properties:\n      - context: (object - required) The context of your component\n      - state: (string - required) The state property you want to sync with Firebase\n      - asArray: (boolean - optional) Returns the Firebase data at the specified endpoint as an Array instead of an Object\n      - queries: (object - optional) Queries to be used with your read operations.  See [Query Options](#queries) for more details.\n      - then: (function - optional) The callback function that will be invoked when the initial listener is established with Firebase. Typically used (with syncState) to change `this.state.loading` to false.\n\n#### Return Value\n  An object which you can pass to `removeBinding` when your component unmounts to remove the Firebase listeners.\n\n#### Example\n\n```javascript\ncomponentDidMount(){\n  base.syncState(`shoppingList`, {\n    context: this,\n    state: 'items',\n    asArray: true\n  });\n}\naddItem(newItem){\n  this.setState({\n    items: this.state.items.concat([newItem]) //updates Firebase and the local state\n  });\n}\n```\n\n<br />\n\n## bindToState(endpoint, options)\n\n#### Purpose\n  One way data binding from Firebase to your component's state. Allows you to bind a component's state property to a Firebase endpoint so whenever that Firebase endpoint changes, your component's state will be updated with that change.\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint that you'd like your component's state property to listen for changes\n  2. options\n    - type: object\n    - properties:\n      - context: (object - required) The context of your component\n      - state: (string - required) The state property you want to sync with Firebase\n      - asArray: (boolean - optional) Returns the Firebase data at the specified endpoint as an Array instead of an Object\n      - queries: (object - optional) Queries to be used with your read operations.  See [Query Options](#queries) for more details.\n      - then: (function - optional) The callback function that will be invoked when the initial listener is established with Firebase. Typically used (with bindToState) to change `this.state.loading` to false.\n\n#### Return Value\n  An object which you can pass to `removeBinding` when your component unmounts to remove the Firebase listeners.\n\n#### Example\n\n```javascript\ncomponentDidMount(){\n  base.bindToState('tasks', {\n    context: this,\n    state: 'tasks',\n    asArray: true\n  });\n}\n```\n\n<br />\n\n## listenTo(endpoint, options)\n\n#### Purpose\n  Allows you to listen to Firebase endpoints without binding those changes to a state property. Instead, a callback will be invoked with the newly updated data.\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint which contains the data with which you'd like to invoke your callback function\n  2. options\n    - type: object\n    - properties:\n      - context: (object - required) The context of your component\n      - asArray: (boolean - optional) Returns the Firebase data at the specified endpoint as an Array instead of an Object\n      - then: (function - required) The callback function that will be invoked with the data from the specified endpoint when the endpoint changes\n      - queries: (object - optional) Queries to be used with your read operations.  See [Query Options](#queries) for more details.\n\n#### Return Value\n  An object which you can pass to `removeBinding` when your component unmounts to remove the Firebase listeners.\n\n#### Example\n\n```javascript\ncomponentDidMount(){\n  base.listenTo('votes', {\n    context: this,\n    asArray: true,\n    then(votesData){\n      var total = 0;\n      votesData.forEach((vote, index) => {\n        total += vote\n      });\n      this.setState({total});\n    }\n  })\n}\n```\n\n<br />\n\n## fetch(endpoint, options)\n\n#### Purpose\n  Allows you to retrieve the data from a Firebase endpoint just once without subscribing or listening for data changes.\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint which contains the data you're wanting to fetch\n  2. options\n    - type: object\n    - properties:\n      - context: (object - required) The context of your component\n      - asArray: (boolean - optional) Returns the Firebase data at the specified endpoint as an Array instead of an Object\n      - then: (function - required) The callback function that will be invoked with the data from the specified endpoint when the endpoint changes\n      - onFailure: (function - optional) The callback function that will be invoked with an error that occurs reading data from the specified endpoint\n      - queries: (object - optional) Queries to be used with your read operations.  See [Query Options](#queries) for more details.\n\n#### Return Value\n  A Firebase [Promise](https://firebase.google.com/docs/reference/js/firebase.Promise) which resolves when the write is complete and rejects if there is an error\n\n#### Example\n\n*Using callback*\n\n```javascript\ngetSales(){\n  base.fetch('sales', {\n    context: this,\n    asArray: true,\n    then(data){\n      console.log(data);\n    }\n  });\n}\n```\n\n*Using Promise*\n\n```javascript\ngetSales(){\n  base.fetch('sales', {\n    context: this,\n    asArray: true\n  }).then(data => {\n    console.log(data);\n  }).catch(error => {\n    //handle error\n  })\n}\n```\n\n<br />\n\n## post(endpoint, options)\n\n#### Purpose\n  Allows you to update a Firebase endpoint with new data. *Replace all the data at this endpoint with the new data*\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint that you'd like to update with the new data\n  2. options\n    - type: object\n    - properties:\n      - data: (any - required) The data you're wanting to persist to Firebase\n      - then: (function - optional) A callback that will get invoked once the new data has been saved to Firebase. If there is an error, it will be the only argument to this function.\n\n#### Return Value\n  A Firebase [Promise](https://firebase.google.com/docs/reference/js/firebase.Promise) which resolves when the write is complete and rejects if there is an error\n\n#### Example\n\n*Using callback*\n\n```javascript\naddUser(){\n  base.post(`users/${userId}`, {\n    data: {name: 'Tyler McGinnis', age: 25},\n    then(err){\n      if(!err){\n        Router.transitionTo('dashboard');\n      }\n    }\n  });\n}\n```\n\n*Using promise*\n\n```javascript\naddUser(){\n  base.post(`users/${userId}`, {\n    data: {name: 'Tyler McGinnis', age: 25}\n  }).then(() => {\n    Router.transitionTo('dashboard');\n  }).catch(err => {\n    // handle error\n  });\n}\n```\n\n<br />\n\n## push(endpoint, options)\n\n#### Purpose\n  Allows you to add data to a Firebase endpoint. *Adds data to a child of the endpoint with a new Firebase push key*\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint that you'd like to push the new data to\n  2. options\n    - type: object\n    - properties:\n      - data: (any - required) The data you're wanting to persist to Firebase\n      - then: (function - optional) A callback that will get invoked once the new data has been saved to Firebase. If there is an error, it will be the only argument to this function.\n\n#### Return Value\n  A Firebase [ThenableReference](https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference)\n  which is defined by Firebase as a \"Combined Promise and reference; resolves when write is complete, but can be used immediately as the reference to the child location.\"\n\n#### Example\n\n*Using callback*\n\n```javascript\n//\naddBear(){\n  var immediatelyAvailableReference = base.push('bears', {\n    data: {name: 'George', type: 'Grizzly'},\n    then(err){\n      if(!err){\n        Router.transitionTo('dashboard');\n      }\n    }\n  });\n  //available immediately, you don't have to wait for the callback to be called\n  var generatedKey = immediatelyAvailableReference.key;\n}\n```\n\n*Using Promise interface*\n\n```javascript\n//\naddBear(){\n  var immediatelyAvailableReference = base.push('bears', {\n    data: {name: 'George', type: 'Grizzly'}\n  }).then(newLocation => {\n    var generatedKey = newLocation.key;\n  }).catch(err => {\n    //handle error\n  });\n  //available immediately, you don't have to wait for the Promise to resolve\n  var generatedKey = immediatelyAvailableReference.key; \n}\n\n```\n\n<br />\n\n## update(endpoint, options)\n\n#### Purpose\n  Allows you to update data at a Firebase endpoint changing only the properties you pass to it.\n  **Warning: calling update with `options.data` being null will remove the all the data at that endpoint**\n\n#### Arguments\n  1. endpoint\n    - type: string\n    - The relative Firebase endpoint that you'd like to update\n  2. options\n    - type: object\n    - properties:\n      - data: (any - required) The data you're wanting to persist to Firebase\n      - then: (function - optional) A callback that will get invoked once the new data has been saved to Firebase. If there is an error, it will be the only argument to this function.\n\n#### Return Value\n  A Firebase [Promise](https://firebase.google.com/docs/reference/js/firebase.Promise) which resolves when the write is complete and rejects if there is an error\n\n#### Example\n\n*Using callback*\n\n```javascript\n  // bears endpoint currently holds the object { name: 'Bill', type: 'Grizzly' }\n  base.update('bears', {\n    data: {name: 'George'},\n    then(err){\n      if(!err){\n        Router.transitionTo('dashboard');\n        //bears endpint is now {name: 'George', type: 'Grizzly'}\n      }\n    }\n  });\n  \n```\n\n*Using Promise*\n\n```javascript\n  // bears endpoint currently holds the object { name: 'Bill', type: 'Grizzly' }\n  base.update('bears', {\n    data: {name: 'George'}\n  }).then(() => {\n    Router.transitionTo('dashboard');\n  }).catch(err => {\n    //handle error\n  });\n```\n\n<br />\n\n## removeBinding(ref)\n\n#### Purpose\n  Remove the listeners to Firebase when your component unmounts.\n\n#### Arguments\n  1. ref\n    - type: Object\n    - The return value of syncState, bindToState, or listenTo\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\ncomponentDidMount(){\n  this.ref = base.syncState('users', {\n    context: this,\n    state: 'users'\n  });\n}\ncomponentWillUnmount(){\n  base.removeBinding(this.ref);\n}\n```\n\n<br />\n\n## reset()\n\n#### Purpose\n  Removes every Firebase listener and resets all private variables. Used for testing purposes.\n\n#### Arguments\n  No Arguments\n\n#### Return Value\n  No return value\n\n<br />\n\n## <a name='queries'>Queries</a>\n\nUse the query option to utilize the [Firebase Query](https://www.firebase.com/docs/web/guide/retrieving-data.html#section-queries) API.  For a list of available queries and how they work, see the Firebase docs.\n\nQueries are accepted in the `options` object of each read method (`syncState`, `bindToState`, `listenTo`, and `fetch`).  The object should have one or more keys of the type of query you wish to run, with the value being the value for the query.  For example:\n\n```javascript\nbase.syncState('users', {\n  context: this,\n  state: 'users',\n  asArray: true,\n  queries: {\n    orderByChild: 'iq',\n    limitToLast: 3\n  }\n})\n```\n\nThe binding above will sort the `users` endpoint by iq, retrieve the last three (or, three with highest iq), and bind it to the component's `users` state.  NOTE: This query is happening within Firebase.  The *only* data that will be retrieved are the three users with the highest iq.\n\n## <a name='auth'>Authentication</a>\n\nre-base exposes a few methods of [the Firebase Auth service](https://firebase.google.com/docs/reference/js/firebase.auth.Auth) to help with user authentication.\n\n## authWithPassword(auth, authHandler)\n\n#### Purpose\n  Authenticate a user by email and password. \n  \n  **_the Email sign-in method needs to be enabled in your firebase console_**\n\n#### Arguments\n  1. authentication object\n    - type: Object\n    - properties: \n    \t- email (string - required) \n    \t- password (string - required)\n  2. auth handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object)\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\nvar authHandler = function(error, user) {\n  if(error) doSomethingWithError(error);\n  doSomethingWithUser(user);\n}\n\n// Simple email/password authentication\nbase.authWithPassword({\n  email    : 'bobtony@firebase.com',\n  password : 'correcthorsebatterystaple'\n}, authHandler);\n\n```\n<br />\n\n## authWithOAuthPopup(provider, handler, settings)\n\n#### Purpose\n  Authenticate a user using an OAuth popup\n  \n  **_the sign in provider you are using needs to be enabled in your firebase console_**\n\n#### Arguments\n  1. provider\n    - type: string\n    - name of auth provider \"facebook, twitter, github, google\"\n  2. auth handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object)\n  3. settings (available settings vary per auth provider)\n  \t- type: object (optional)\n  \t\t- properties:\n  \t\t\t- scope (array or string)\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\nvar authHandler = function(error, user) {\n  if(error) doSomethingWithError(error);\n  doSomethingWithUser(user);\n}\n//basic\nbase.authWithOAuthPopup('twitter', authHandler);\n\n// with settings\nbase.authWithOAuthPopup('github', authHandler, {scope: ['repos']});\n\n```\n<br />\n\n## authWithOAuthRedirect(provider, handler, settings)\n\n#### Purpose\n  Authenticate a user using an OAuth redirect\n  \n  **_the sign in provider you are using needs to be enabled in your firebase console_**\n\n#### Arguments\n  1. provider\n    - type: string\n    - name of auth provider \"facebook, twitter, github, google\"\n  2. auth handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  3. settings (available settings vary per auth provider)\n  \t- type: object (optional)\n  \t\t- properties:\n  \t\t\t- scope (array or string)\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\nvar authHandler = function(error) {\n  if(error) doSomethingWithError(error);\n  // noop if redirect is successful\n  return;\n}\n//basic\nbase.authWithOAuthRedirect('twitter', authHandler);\n\n// with settings\nbase.authWithOAuthRedirect('github', authHandler, {scope: ['repos']});\n\n```\n<br />\n\n## authGetOAuthRedirectResult(handler)\n\n#### Purpose\n Completes the OAuth redirect flow initiated by `authWithOAuthRedirect`\n\n#### Arguments\n\n  1. handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object)\n\n#### Return Value\n  No return value\n\n#### <a name='redirect-example'>Example</a>\n\n```javascript\nvar authHandler = function(error) {\n  if(error) console.log(error);\n  // noop if redirect is successful\n  return;\n}\n\nvar onRedirectBack = function(error, authData){\n  if(error) console.log(error);\n  if(authData.user){\n    doSomethingWithAuthenticatedUser(authData.user);\n  } else {\n    //redirect to twitter for auth\n    base.authWithOAuthRedirect('twitter', authHandler);\n  }\n}\n\nbase.authGetOAuthRedirectResult(onRedirectBack);\n\n\n```\n<br />\n\n## authWithOAuthToken(provider, token, handler, settings)\n\n#### Purpose\n Authenticate with OAuth provider using a token\n\n#### Arguments\n\n  1. provider\n    - type: string\n    - name of auth provider \"facebook, twitter, github, google\"\n  2. token\n    - type: string\n  3. handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object)\n  4. settings (available settings vary per auth provider)\n  \t- type: object (optional)\n  \t\t- properties:\n  \t\t\t- scope (array or string)\n  \t\t\t- providerOptions (object)\n  \t\t\t\t- properties:\n  \t\t\t\t\t- secret (twitter only - optional)\n  \t\t\t\t\t- idToken(google only - optional, must be null if using accessToken)\n  \t\t\t\t\t- accessToken(google only - optional)\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\nvar authHandler = function(error, user) {\n  if(error) doSomethingWithError(error);\n  doSomethingWithAuthenticatedUser(user);\n}\n\n//get the access token\nvar offAuth = base.onAuth(function(authData) {\n  if (authData) {\n    var token = authData.providerData[authData.provider].accessToken;\n    //add settings for auth provider - optional\n    var settings = {\n        scope: ['repos']\n    };\n    //authenticate with token\n    base.authWithOAuthToken(authData.provider, token, authHandler, settings);\n  }\n});\n\n```\n<br />\n\n## authWithCustomToken(token,handler)\n\n#### Purpose\n Authenticate OAuth redirect flow initiated by `authWithOAuthRedirect`\n\n#### Arguments\n\n  1. token\n    - type: string\n  2. auth handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object)\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\nvar authHandler = function(error, user) {\n  if(error) doSomethingWithError(error);\n  doSomethingWithAuthenticatedUser(user);\n}\n\nbase.authWithCustomToken(<yourtoken>, authHandler);\n\n\n```\n<br />\n\n## unauth()\n\n#### Purpose\n Signs out the currently logged in user \n\n#### Arguments\n\nnone\n\n#### Return Value\n  No return value\n\n#### Example\n\n```javascript\n\nbase.unauth()\n\n```\n\n<br />\n\n## onAuth(handler)\n\n#### Purpose\n Listen to the authentication event\n\n#### Arguments\n\n  1. handler\n  \t- type: function\n  \t\t- arguments:\n  \t\t\t- error (object or null)\n  \t\t\t- user data (object or null) null if user is not logged in\n\n#### Return Value\n  an unsubscribe function for the added listener\n#### Example\n\n```javascript\n\nfunction authDataCallback(authData) {\n  if (authData) {\n    console.log(\"User \" + authData.uid + \" is logged in with \" + authData.provider);\n  } else {\n    console.log(\"User is logged out\");\n  }\n}\n\n// Listen to authentication\nvar unsubscribe = base.onAuth(authDataCallback);\n\n//to remove listener\nunsubscribe();\n\n```\n\n\n\n## <a name='users'>User Management</a>\n\nre-base exposes a few helper methods for user methods for user management.\n\n\n```javascript\n// Create\nbase.createUser({\n  email: 'bobtony@firebase.com',\n  password: 'correcthorsebatterystaple'\n}, userHandler);\n\n\n// Reset Password\nbase.resetPassword({\n  email: 'bobtony@firebase.com'\n}, errorHandler);\n\n```\n\n## <a name='firebase-services'>Firebase Services</a>\n\nre-base also exposes the underlying firebase services directly if you need them\n\nFirebase App  [Docs](https://firebase.google.com/docs/reference/js/firebase.app)\n\n`base.app`\n\nFirebase Database [Docs](https://firebase.google.com/docs/reference/js/firebase.database)\n\n`base.database`\n\nFirebase Storage [Docs](https://firebase.google.com/docs/reference/js/firebase.storage)\n\n`base.storage`\n\nFirebase Auth [Docs](https://firebase.google.com/docs/reference/js/firebase.auth)\n\n`base.auth`\n\n## <a name='upgrading'>Upgrading to re-base 2.x from 1.x</a>\n\nFirst follow the upgrade guide at [https://firebase.google.com/support/guides/firebase-web](https://firebase.google.com/support/guides/firebase-web)\n\nChange your re-base initialization to use the new firebase configuration.\n\n**Change** this....\n```javascript\n\nvar Rebase = require('re-base');\nvar base = Rebase.createClass('https://myapp.firebaseio.com');\n\n```\n\n***To*** this...\n```javascript\n\nvar Rebase = require('re-base');\nvar base = Rebase.createClass({\n  \t  apiKey: \"apiKey\",\n      authDomain: \"projectId.firebaseapp.com\",\n      databaseURL: \"https://databaseName.firebaseio.com\",\n      storageBucket: \"bucket.appspot.com\",\n});\n\n```\n\n### Changes to Database methods\n<hr />\n\n\nNo changes. Your existing code should work.\n\n<br />\n\n### Changes to Authentication methods\n<hr />\n\n\n***Deprecated Methods***\n\n`base.offAuth`\n\n`base.onAuth` now returns an unsubscribe function that removes the listener.\n\n***Behavior Changes***\n\n`base.authWithOAuthRedirect`\n\nThe redirect flow needs to be completed with an added `base.authGetOAuthRedirectResult` method. See [example](#redirect-example).\n\n<br />\n### Changes to User Management\n<hr />\n\n***Deprecated Methods***\n\n`base.removeUser` - users can only remove themselves. See [firebase documentation.](https://firebase.google.com/docs/reference/js/firebase.User#delete)\n`base.changePassword` users can only change their own passwords. See [firebase documentation.](https://firebase.google.com/docs/reference/js/firebase.User#updatePassword)\n\n***Behavior Changes***\n\n`base.createUser` - This method will now log you in as the newly created user on success. See [firebase documentation.](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#createUserWithEmailAndPassword)\n\n## Contributing\n\n1. `npm install`\n2. Edit `src/rebase.js`\n3. Add/edit tests in `tests/specs/re-base.spec.js`\n4. `npm run build`\n5. `npm run test`\n\n## Credits\n\nre-base is inspired by ReactFire from Firebase. Jacob Turner is also a core contributor and this wouldn't have been possible without his assistance.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tylermcginnis/re-base.git"
  },
  "scripts": {
    "build": "webpack",
    "test": "karma start tests/karma.conf.js",
    "travis": "./node_modules/karma/bin/karma start tests/karma.conf.js"
  },
  "version": "2.2.0"
}
