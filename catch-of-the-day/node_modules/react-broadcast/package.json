{
  "_args": [
    [
      {
        "raw": "react-broadcast@^0.1.1",
        "scope": null,
        "escapedName": "react-broadcast",
        "name": "react-broadcast",
        "rawSpec": "^0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/Users/deadmaxis/Projects/code/React-For-Beginners-Starter-Files/catch-of-the-day/node_modules/react-router"
    ]
  ],
  "_from": "react-broadcast@>=0.1.1 <0.2.0",
  "_id": "react-broadcast@0.1.2",
  "_inCache": true,
  "_location": "/react-broadcast",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-broadcast-0.1.2.tgz_1477353630243_0.6139866190496832"
  },
  "_npmUser": {
    "name": "ryanflorence",
    "email": "rpflorence@gmail.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-broadcast@^0.1.1",
    "scope": null,
    "escapedName": "react-broadcast",
    "name": "react-broadcast",
    "rawSpec": "^0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-router"
  ],
  "_resolved": "https://registry.npmjs.org/react-broadcast/-/react-broadcast-0.1.2.tgz",
  "_shasum": "950de63578a2af399a396067a617af7402182330",
  "_shrinkwrap": null,
  "_spec": "react-broadcast@^0.1.1",
  "_where": "/Users/deadmaxis/Projects/code/React-For-Beginners-Starter-Files/catch-of-the-day/node_modules/react-router",
  "authors": [
    "Michael Jackson",
    "Ryan Florence"
  ],
  "bugs": {
    "url": "https://github.com/ReactTraining/react-broadcast/issues"
  },
  "dependencies": {
    "invariant": "^2.2.1"
  },
  "description": "A reliable way to broadcast state changes to React elements deep in the hierarchy",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.17.0",
    "babel-eslint": "^7.0.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-dev-expression": "^0.2.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-es2015-loose": "^8.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-1": "^6.5.0",
    "eslint": "^3.3.1",
    "eslint-plugin-import": "^2.0.0",
    "eslint-plugin-react": "^6.1.2",
    "expect": "^1.20.1",
    "gzip-size": "^3.0.0",
    "in-publish": "^2.0.0",
    "karma": "^1.2.0",
    "karma-browserstack-launcher": "^1.0.1",
    "karma-chrome-launcher": "^2.0.0",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "mocha": "^3.0.2",
    "pretty-bytes": "^4.0.0",
    "react": "^15.3.0",
    "react-dom": "^15.3.0",
    "readline-sync": "^1.4.4",
    "webpack": "1.13.2"
  },
  "directories": {},
  "dist": {
    "shasum": "950de63578a2af399a396067a617af7402182330",
    "tarball": "https://registry.npmjs.org/react-broadcast/-/react-broadcast-0.1.2.tgz"
  },
  "gitHead": "00a4d472ecef70571d4ef5e94e283c1c8060acf9",
  "homepage": "https://github.com/ReactTraining/react-broadcast#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "mjackson",
      "email": "mjijackson@gmail.com"
    },
    {
      "name": "ryanflorence",
      "email": "rpflorence@gmail.com"
    }
  ],
  "name": "react-broadcast",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "15.x"
  },
  "readme": "# react-broadcast [![Travis][build-badge]][build] [![npm package][npm-badge]][npm]\n\n[build-badge]: https://img.shields.io/travis/ReactTraining/react-broadcast/master.svg?style=flat-square\n[build]: https://travis-ci.org/ReactTraining/react-broadcast\n\n[npm-badge]: https://img.shields.io/npm/v/react-broadcast.svg?style=flat-square\n[npm]: https://www.npmjs.com/package/react-broadcast\n\n[`react-broadcast`](https://www.npmjs.com/package/react-broadcast) provides a reliable way for React components to propagate state changes to their descendants deep in the component hierarchy, bypassing intermediaries who `return false` from [`shouldComponentUpdate`](https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate).\n\nIt was originally built to solve issues that arose from using [`react-router`](https://www.npmjs.com/package/react-router) together with [`react-redux`](https://www.npmjs.com/package/react-redux). The router needed a safe way to communicate state changes to `<Link>`s deep in the component hierarchy, but `react-redux` relies on `shouldComponentUpdate` for performance. `react-broadcast` allows the router to work seamlessly with Redux and any other component that uses `shouldComponentUpdate`.\n\n**Please note:** As with anything that uses [context](https://facebook.github.io/react/docs/context.html), this library is experimental. It may cease working in some future version of React. For now, it's a practical workaround for the router. If we discover some better way to do things in the future, rest assured we'll do our best to share what we learn.\n\n## Usage\n\nThe following is a totally contrived example, but illustrates the basic functionality we're after:\n\n```js\nimport React from 'react'\nimport { Broadcast, Subscriber } from 'react-broadcast'\n\nconst users = [\n  { name: 'Michael Jackson' },\n  { name: 'Ryan Florence' }\n]\n\nclass UpdateBlocker extends React.Component {\n  shouldComponentUpdate() {\n    // This is how you indicate to React's reconciler that you don't\n    // need to be updated. It's a great way to boost performance when\n    // you're sure (based on your props and state) that your render\n    // output will not change, but it makes it difficult for libraries\n    // to communicate changes down the hierarchy that you don't really\n    // know anything about.\n    return false\n  }\n\n  render() {\n    // We can get around the blocker using a <Subscriber>\n    return (\n      <Subscriber channel=\"currentUser\">\n        {currentUser => <p>The current user is {currentUser.name}</p>}\n      </Subscriber>\n    )\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    currentUser: users[0]\n  }\n\n  componentDidMount() {\n    // Randomly change the current user every 2 seconds.\n    setInterval(() => {\n      const index = Math.floor(Math.random() * users.length)\n      this.setState({ currentUser: users[index] })\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <Broadcast channel=\"currentUser\" value={this.state.currentUser}>\n        <UpdateBlocker/>\n      </Broadcast>\n    )\n  }\n}\n```\n\nYou may prefer to wrap these components into channel-specific pairs to avoid typos and other problems with the indirection involved with the channel strings:\n\n```js\n// Broadcasts.js\nimport { Broadcast, Subscriber } from 'react-broadcast'\n\nconst CurrentUserChannel = 'currentUser'\n\nexport const CurrentUserBroadcast = (props) =>\n  <Broadcast {...props} channel={CurrentUserChannel}/>\n\nexport const CurrentUserSubscriber = (props) =>\n  <Subscriber {...props} channel={CurrentUserChannel}/>\n\n// App.js\nimport { CurrentUserBroadcast, CurrentUserSubscriber } from './Broadcasts'\n\n<CurrentUserBroadcast value={user}/>\n<CurrentUserSubscriber>{user => ...}</CurrentUserSubscriber>\n```\n\nThat's it! Enjoy :)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ReactTraining/react-broadcast.git"
  },
  "scripts": {
    "build": "node ./scripts/build.js",
    "build-cjs": "babel ./modules -d . --ignore '__tests__'",
    "build-min": "webpack -p modules/index.js umd/react-broadcast.min.js",
    "build-umd": "webpack modules/index.js umd/react-broadcast.js",
    "lint": "eslint modules",
    "prepublish": "node ./scripts/build.js",
    "release": "node ./scripts/release.js",
    "test": "npm run lint && karma start"
  },
  "version": "0.1.2"
}
